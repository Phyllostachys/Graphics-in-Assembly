     1                                  %define SECTORS 16                          ; keep it under 18
     2                                  %define IMAGE_SIZE ((SECTORS + 1) * 512)    ; SECTORS + 1 (~= 18) * 512 bytes
     3                                  %define STACK_SIZE 256                      ; 4096 bytes in paragraphs
     4                                  
     5                                  bits 16                                     ; 16 bit mode
     6                                  ;org 0x7C00                                 ; BIOS boot sector entry point
     7                                  
     8                                  start:
     9 00000000 FA                          cli ; disable interrupts
    10                                  
    11                                      ;
    12                                      ; Notes:
    13                                      ;  1 paragraph  = 16 bytes
    14                                      ; 32 paragraphs = 512 bytes
    15                                      ;
    16                                      ; Skip past our SECTORS
    17                                      ; Skip past our reserved video memory buffer (for double buffering)
    18                                      ; Skip past allocated STACK_SIZE
    19                                      ;
    20 00000001 B8C012                      mov ax, (((SECTORS + 1) * 32) + 4000 + STACK_SIZE)
    21 00000004 8ED0                        mov ss, ax
    22 00000006 BC0010                      mov sp, STACK_SIZE * 16 ; 4096 in bytes
    23                                  
    24 00000009 FB                          sti ; enable interrupts
    25                                  
    26 0000000A B8C007                      mov ax, 07C0h           ; point all segments to _start
    27 0000000D 8ED8                        mov ds, ax
    28 0000000F 8EC0                        mov es, ax
    29 00000011 8EE0                        mov fs, ax
    30 00000013 8EE8                        mov gs, ax
    31                                  
    32                                      ; dl contains the drive number
    33                                  
    34 00000015 B80000                      mov ax, 0               ; reset disk function
    35 00000018 CD13                        int 13h                 ; call BIOS interrupt
    36 0000001A 7223                        jc disk_reset_error
    37                                  
    38                                      ; FIXME: if SECTORS + 1 > 18 (~= max sectors per track)
    39                                      ; then we should try to do _multiple_ reads
    40                                      ;
    41                                      ; Notes:
    42                                      ;
    43                                      ; 1 sector          = 512 bytes
    44                                      ; 1 cylinder/track  = 18 sectors
    45                                      ; 1 side            = 80 cylinders/tracks
    46                                      ; 1 disk (1'44 MB)  = 2 sides
    47                                      ;
    48                                      ; 2 * 80 * 18 * 512 = 1474560 bytes = 1440 kilo bytes = 1.4 mega bytes
    49                                      ;
    50                                      ; We start _reading_ at SECTOR 2 because SECTOR 1 is where our stage 1
    51                                      ; _bootloader_ (this piece of code up until the dw 0xAA55 marker, if you
    52                                      ; take the time and scroll down below) is *loaded* automatically by BIOS
    53                                      ; and therefore there is no need to read it again ...
    54                                  
    55 0000001C 06                          push es             ; save es
    56                                  
    57 0000001D B8E007                      mov ax, 07E0h       ; destination location (address of _start)
    58 00000020 8EC0                        mov es, ax          ; destination location
    59 00000022 BB0000                      mov bx, 0           ; index 0
    60                                  
    61 00000025 B402                        mov ah, 2           ; read sectors function
    62 00000027 B010                        mov al, SECTORS     ; number of sectors
    63 00000029 B500                        mov ch, 0           ; cylinder number
    64 0000002B B600                        mov dh, 0           ; head number
    65 0000002D B102                        mov cl, 2           ; starting sector number
    66 0000002F CD13                        int 13h             ; call BIOS interrupt
    67                                  
    68 00000031 7211                        jc disk_read_error
    69                                  
    70 00000033 07                          pop es              ; restore es
    71                                  
    72 00000034 BE[8900]                    mov si, boot_msg    ; boot message
    73 00000037 E81A00                      call _puts          ; print
    74                                  
    75 0000003A EA0000E007                  jmp 07E0h:0000h     ; jump to _start (a.k.a stage 2)
    76                                  
    77                                  disk_reset_error:
    78 0000003F BE[6000]                    mov si, disk_reset_error_msg
    79 00000042 EB03                        jmp fatal
    80                                  
    81                                  disk_read_error:
    82 00000044 BE[7500]                    mov si, disk_read_error_msg
    83                                  
    84                                  fatal:
    85 00000047 E80A00                      call _puts  ; print message in [DS:SI]
    86                                  
    87 0000004A B80000                      mov ax, 0   ; wait for a keypress
    88 0000004D CD16                        int 16h
    89                                  
    90 0000004F B80000                      mov ax, 0   ; reboot
    91 00000052 CD19                        int 19h
    92                                  
    93                                  ; ===========================================
    94                                  ; PROTOTYPE : void _puts(char *s)
    95                                  ; INPUT     : offset/pointer to string in SI
    96                                  ; RETURN    : n/a
    97                                  ; ===========================================
    98                                  _puts:
    99 00000054 AC                          lodsb       ; move byte [DS:SI] into AL
   100                                  
   101 00000055 3C00                        cmp al, 0   ; 0 == end of string ?
   102 00000057 7406                        je .end
   103                                  
   104 00000059 B40E                        mov ah, 0Eh ; display character function
   105 0000005B CD10                        int 10h     ; call BIOS interrupt
   106                                  
   107 0000005D EBF5                        jmp _puts   ; next character
   108                                  
   109                                  .end:
   110 0000005F C3                          ret
   111                                  
   112 00000060 436F756C64206E6F74-     disk_reset_error_msg: db 'Could not reset disk', 0
   113 00000069 207265736574206469-
   114 00000072 736B00             
   115 00000075 436F756C64206E6F74-     disk_read_error_msg: db 'Could not read disk', 0
   116 0000007E 207265616420646973-
   117 00000087 6B00               
   118 00000089 426F6F74696E672046-     boot_msg: db 'Booting Floppy Bird ... ', 0
   119 00000092 6C6F70707920426972-
   120 0000009B 64202E2E2E2000     
   121                                  
   122 000000A2 00<rept>                times 510 - ($ - $$) db 0   ; pad to 510 bytes
   123 000001FE 55AA                    dw 0xAA55                   ; pad 2 more bytes = 512 bytes = THE BOOT SECTOR
   124                                  
   125                                  ; entry point
   126                                  _start:
   127 00000200 E81B00                      call main               ; call main
   128 00000203 EBFE                        jmp $                   ; loop forever
   129                                  
   130 00000205 805500                  pointA:  db 128,  85,  0
   131 00000208 C3C828                  pointB:  db 195, 200, 40
   132 0000020B 3CC828                  pointC:  db  60, 200, 40
   133 0000020E 5C1C7C3F                cos:     dd 0.984807753
   134 00000212 D947783F                cos_sqr: dd 0.969846310
   135 00000216 D4D0313E                sin:     dd 0.173648178
   136 0000021A DF04F73C                sin_sqr: dd 0.030153689
   137                                  
   138                                  %define BLACK    0x0
   139                                  %define BLUE     0x1
   140                                  %define GREEN    0x2
   141                                  %define CYAN     0x3
   142                                  %define RED      0x4
   143                                  %define MAGENTA  0x5
   144                                  %define BROWN    0x6
   145                                  %define LGREY    0x7
   146                                  %define DGREY    0x8
   147                                  %define LBLUE    0x9
   148                                  %define LGREEN   0xA
   149                                  %define LCYAN    0xB
   150                                  %define LRED     0xC
   151                                  %define LMAGENTA 0xD
   152                                  %define YELLOW   0xE
   153                                  %define WHITE    0xF
   154                                  
   155                                  main:
   156                                      ;mov ax, 0x3     ; 80x25 @ 16 color mode
   157                                      ;int 10h         ; call BIOS interrupt
   158                                  
   159                                      ;mov si, msg
   160                                      ;call puts
   161                                  
   162 0000021E E82B00                      call set_vga_mode ; 320x200 @ 256 color mode
   163                                  .loop:
   164                                      ;=====================
   165                                      ; drawing a pixel
   166                                      ;push 30         ; x
   167                                      ;push 30         ; y
   168                                      ;push WHITE      ; color
   169                                  
   170                                      ;call put_pixel
   171 00000221 68[0502]                    push pointA
   172 00000224 68[0802]                    push pointB
   173 00000227 68[0B02]                    push pointC
   174 0000022A E87300                      call draw_triangle
   175                                  
   176 0000022D E82400                      call vsync
   177 00000230 E83100                      call flpscr
   178                                  
   179 00000233 EBEC                        jmp .loop
   180                                  
   181 00000235 C3                          ret
   182                                  
   183                                  set_txt_mode:
   184 00000236 60                          pusha
   185                                  
   186 00000237 B80300                      mov ax, 0x3     ; 80x25 @ 16 color mode
   187 0000023A CD10                        int 10h         ; call BIOS interrupt
   188                                  
   189 0000023C 61                          popa
   190 0000023D C3                          ret
   191                                  
   192                                  puts:
   193 0000023E 60                          pusha
   194                                  
   195                                  .loop:
   196 0000023F AC                          lodsb       ; move byte [DS:SI] into AL
   197                                  
   198 00000240 3C00                        cmp al, 0   ; 0 == end of string ?
   199 00000242 7406                        je .end
   200                                  
   201 00000244 B40E                        mov ah, 0Eh ; display character function
   202 00000246 CD10                        int 10h     ; call BIOS interrupt
   203                                  
   204 00000248 EBF5                        jmp .loop   ; next character
   205                                  
   206                                  .end:
   207 0000024A 61                          popa
   208 0000024B C3                          ret
   209                                  
   210                                  %define VIDMEW 320        ; video memory width
   211                                  %define VIDMEH 200        ; video memory height
   212                                  %define VIDMES 64000      ; video memory size
   213                                  %define VIDMEM IMAGE_SIZE ; back buffer video memory
   214                                  %define VIDMED 0xA000     ; system video memory
   215                                  
   216                                  ; ==========================================
   217                                  ; PROTOTYPE : void set_vga_mode(void)
   218                                  ; INPUT     : n/a
   219                                  ; RETURN    : n/a
   220                                  ; ==========================================
   221                                  set_vga_mode:
   222 0000024C 60                          pusha
   223                                  
   224 0000024D B81300                      mov ax, 0x13    ; 320x200 @ 256 color mode
   225 00000250 CD10                        int 10h         ; call BIOS interrupt
   226                                  
   227 00000252 61                          popa
   228 00000253 C3                          ret
   229                                  
   230                                  ; ==========================================
   231                                  ; PROTOTYPE : void vsync(void)
   232                                  ; INPUT     : n/a
   233                                  ; RETURN    : n/a
   234                                  ; ==========================================
   235                                  vsync:
   236 00000254 60                          pusha
   237 00000255 BADA03                      mov dx, 0x3DA   ; port 0x3DA
   238                                  
   239                                  .l1:
   240 00000258 EC                          in al, dx       ; port
   241 00000259 A808                        test al, 8      ; test bit 4
   242 0000025B 75FB                        jnz .l1         ; retrace in progress?
   243                                  
   244                                  .l2:
   245 0000025D EC                          in al, dx       ; port
   246 0000025E A808                        test al, 8      ; test bit 4
   247 00000260 74FB                        jz .l2          ; new retrace?
   248                                  
   249 00000262 61                          popa
   250 00000263 C3                          ret
   251                                  
   252                                  ; ==========================================
   253                                  ; PROTOTYPE : void flpscr(void)
   254                                  ; INPUT     : n/a
   255                                  ; RETURN    : n/a
   256                                  ; ==========================================
   257                                  flpscr:
   258 00000264 1E                          push ds
   259 00000265 51                          push cx
   260                                  
   261 00000266 B900A0                      mov cx, VIDMED
   262 00000269 8EC1                        mov es, cx
   263 0000026B 31FF                        xor di, di
   264                                  
   265 0000026D B90022                      mov cx, VIDMEM
   266 00000270 8ED9                        mov ds, cx
   267 00000272 31F6                        xor si, si
   268                                  
   269 00000274 B9803E                      mov cx, VIDMES / 4 ; 64000 / 4
   270                                  
   271 00000277 F366A5                      rep movsd  ; copy 4 bytes from [DS:SI] into [ES:DI]
   272                                  
   273 0000027A 59                          pop cx
   274 0000027B 1F                          pop ds
   275 0000027C C3                          ret
   276                                  
   277                                  ; ==========================================
   278                                  ; PROTOTYPE : void put_pixel(short x, short y
   279                                  ;                            unsigned char color)
   280                                  ; INPUT     : n/a
   281                                  ; RETURN    : n/a
   282                                  ; ==========================================
   283                                  put_pixel:
   284 0000027D 55                          push bp
   285 0000027E 89E5                        mov bp, sp          ; top of the stack
   286                                  
   287 00000280 60                          pusha
   288                                  
   289 00000281 B80022                      mov ax, VIDMEM      ; pointer to screen buffer
   290 00000284 8EC0                        mov es, ax          ;
   291                                  
   292 00000286 8B4606                      mov ax, [bp+6]      ; y
   293 00000289 8B5E08                      mov bx, [bp+8]      ; x
   294 0000028C B94001                      mov cx, 320         ; screen width
   295 0000028F F7E1                        mul cx              ; multiply ax by 320 (cx)
   296 00000291 01D8                        add ax, bx          ; and add x
   297 00000293 89C7                        mov di, ax          ; load Destination Index register with ax value (the coords to put the pixel)
   298 00000295 8A5604                      mov dl, byte [bp+4] ; color
   299 00000298 268815                      mov [es:di], dl
   300                                  
   301 0000029B 61                          popa
   302 0000029C 5D                          pop bp
   303 0000029D C20600                      ret 6              ; 3 params * 2 bytes
   304                                  
   305                                  ; draw_triangle: draw a 3d looking pyramid
   306                                  ; inputs:
   307                                  ;   ax,bx,cx - 3 locations of 3 points to draw
   308                                  ; return: none
   309                                  draw_triangle:
   310 000002A0 60                          pusha
   311                                  
   312                                      ; Draw A-B
   313                                      ;lw  $a0,0($s0)
   314                                      ;lw  $a1,4($s0)
   315                                      ;lw  $a2,12($s0)
   316                                      ;lw  $a3,16($s0)
   317                                      ;jal DrawLine
   318 000002A1 8B4606                      mov ax, [bp+6]
   319 000002A4 50                          push ax
   320 000002A5 8B4604                      mov ax, [bp+4]
   321 000002A8 50                          push ax
   322 000002A9 6A0F                        push WHITE
   323 000002AB E8CFFF                      call put_pixel
   324                                  
   325                                      ; Draw A-C
   326                                      ;lw  $a0,0($s0)
   327                                      ;lw  $a1,4($s0)
   328                                      ;lw  $a2,24($s0)
   329                                      ;lw  $a3,28($s0)
   330                                      ;jal DrawLine
   331                                  
   332                                      ; Draw A-D
   333                                      ;lw  $a0,0($s0)
   334                                      ;lw  $a1,4($s0)
   335                                      ;lw  $a2,36($s0)
   336                                      ;lw  $a3,40($s0)
   337                                      ;jal DrawLine
   338                                  
   339                                      ; Draw B-C
   340                                      ;lw  $a0,12($s0)
   341                                      ;lw  $a1,16($s0)
   342                                      ;lw  $a2,24($s0)
   343                                      ;lw  $a3,28($s0)
   344                                      ;jal DrawLine
   345                                  
   346                                      ; Draw B-D
   347                                      ;lw  $a0,12($s0)
   348                                      ;lw  $a1,16($s0)
   349                                      ;lw  $a2,36($s0)
   350                                      ;lw  $a3,40($s0)
   351                                      ;jal DrawLine
   352                                  
   353                                      ; Draw C-D
   354                                      ;lw  $a0,24($s0)
   355                                      ;lw  $a1,28($s0)
   356                                      ;lw  $a2,36($s0)
   357                                      ;lw  $a3,40($s0)
   358                                      ;jal DrawLine
   359                                  
   360 000002AE 61                          popa
   361 000002AF C20600                      ret 6
